[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Allen’s Projects",
    "section": "",
    "text": "Hello I’m Allen I’m a UTD student studying for my masters in Data Analytics and Research. This semester I wish to complete a couple of projects.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Allen Hernandez is a UTD Sociology graduate currently studying Data Analytics and Research. My future goal is to conduct multiple data analysis projects that can help improve people lives and strengthen society.\nThis is a website created through R studio."
  },
  {
    "objectID": "Personal.html",
    "href": "Personal.html",
    "title": "Personal",
    "section": "",
    "text": "A little about my self is that I am a first generation graduate. I graduate at UTD with a bachelors in Sociology. One of my personal goals is to work in a think tank organization."
  },
  {
    "objectID": "Research.html",
    "href": "Research.html",
    "title": "Allen Hernandez",
    "section": "",
    "text": "Projects loading.."
  },
  {
    "objectID": "Project.html",
    "href": "Project.html",
    "title": "Allen Hernandez",
    "section": "",
    "text": "Projects/Assignments\nEPPS 6356\nA Maroon Leaf\n\noptions(repos = c(CRAN = \"https://cran.rstudio.com/\"))\nlibrary(gsubfn)\n\nLoading required package: proto\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %&gt;% unlist\n\nstatus=data.frame(x=numeric(1), y=numeric(1), alfa=numeric(1))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %&gt;% rbind(points)-&gt;points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %&gt;%\n      rbind(status) -&gt; status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n\n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]-&gt;points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %&gt;%\n      rbind(points) -&gt; points\n    status[-1,]-&gt;status\n  }\n}\n\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color=\"maroon\", \n               data=na.omit(points)) +\n  coord_fixed(ratio = 1) +\n  theme_void() \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this chart we see the importance of the usage of color. Each color correspond to an issue. The only issue with this is that there are two colors are pretty familiar; The red and the orange.\nAssignment\n\nplot(pressure, pch=6)\ntext(130, 700, \n     \"Pressure (mm Hg)\\nversus\\nTemperature (Celsius)\")\n\n\n\n\n\n\n\n# Setting the parameter (3 rows by 2 cols)\npar(mfrow=c(2, 2))\n# Scatterplot\nx &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, .8, .5, .45, .4, .3)\n\npar(las=1, mar=c(4, 4, 2, 4), cex=.7) \nplot.new()\nplot.window(range(x), c(0, 6))\nlines(x, y1)\nlines(x, y2)\npoints(x, y1, pch=16, cex=2) # Try different cex value?  \npoints(x, y2, pch=21, bg=\"white\", cex=2)  # Different background color\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4)) # What is the first number standing for?\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\", side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\", side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\", side=4, line=2, las=0, cex=0.8)\ntext(4, 5, \"Bird 131\")\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\nY &lt;- rnorm(50)\n\nY[Y &lt; -3.5 | Y &gt; 3.5] &lt;- NA # Selection/set range\nx &lt;- seq(-3.5, 3.5, .1)\ndn &lt;- dnorm(x)\npar(mar=c(4.5, 4.1, 3.1, 0))\nhist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), \n     col=\"gray40\", freq=FALSE)\nlines(x, dnorm(x), lwd=2)\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\npar(mar=c(2, 3.1, 2, 2.1)) \nmidpts &lt;- barplot(VADeaths, \n                  col=gray(0.1 + seq(1, 9, 2)/11), \n                  names=rep(\"\", 4))\nmtext(sub(\" \", \"\\n\", colnames(VADeaths)),\n      at=midpts, side=1, line=0.5, cex=0.5)\ntext(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,\n     VADeaths, \n     col=rep(c(\"white\", \"black\"), times=3:2), \n     cex=0.8)\npar(mar=c(5.1, 4.1, 4.1, 2.1))  \n\npar(mar=c(3, 4.1, 2, 0))\nboxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset= supp == \"VC\", col=\"white\",\n        xlab=\"\",\n        ylab=\"tooth length\", ylim=c(0,35))\nmtext(\"Vitamin C dose (mg)\", side=1, line=2.5, cex=0.8)\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        \n        subset= supp == \"OJ\")\nlegend(1.5, 9, c(\"Ascorbic acid\", \"Orange juice\"), \n       fill = c(\"white\", \"gray\"), \n       bty=\"n\")\n\n\n\n\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\nx &lt;- seq(-10, 10, length= 30)\ny &lt;- x\nf &lt;- function(x,y) { r &lt;- sqrt(x^2+y^2); 10 * sin(r)/r }\nz &lt;- outer(x, y, f)\nz[is.na(z)] &lt;- 1\n# 0.5 to include z axis label\npar(mar=c(0, 0.5, 0, 0), lwd=0.5)\npersp(x, y, z, theta = 30, phi = 30, \n      expand = 0.5)\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) &lt;- c(\"Blueberry\", \"Cherry\",\n                      \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla\")\n\n\n\n\n\n\n\n\n\ndata(anscombe)  # Load Anscombe's data\nView(anscombe) # View the data\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n# Create four model objects\nlm1 &lt;- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\n\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,    Adjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\nlm2 &lt;- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\n\n\nCall:\nlm(formula = y2 ~ x2, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nx2             0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\nlm3 &lt;- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\n\n\nCall:\nlm(formula = y3 ~ x3, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1586 -0.6146 -0.2303  0.1540  3.2411 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0025     1.1245   2.670  0.02562 * \nx3            0.4997     0.1179   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6663,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002176\n\nlm4 &lt;- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\n\n\nCall:\nlm(formula = y4 ~ x4, data = anscombe)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.751 -0.831  0.000  0.809  1.839 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0017     1.1239   2.671  0.02559 * \nx4            0.4999     0.1178   4.243  0.00216 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6667,    Adjusted R-squared:  0.6297 \nF-statistic:    18 on 1 and 9 DF,  p-value: 0.002165\n\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\n\n\n\n\n\n\n\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\n\n\n\n\n\n\n\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\n\n\n\n\n\n\n\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n\n\n\n\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(&gt;F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsapply(mods, coef)  # Note the use of this function\n\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n\nlapply(mods, function(fm) coef(summary(fm)))\n\n$lm1\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\n\n\n\n\npar(op)\n\n\n# Clear environment\nrm(list = ls())\n\n# libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n# Load the data from OWID GitHub\nowideu &lt;- read.csv(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n\n# Deselect cases/rows with OWID\nowideu &lt;- owideu[!grepl(\"^OWID\", owideu$iso_code), ]\n\n# Subset data for Europe\nowideu &lt;- subset(owideu, continent == \"Europe\")\n\n# Convert the date column to Date type\nowideu$date &lt;- as.Date(owideu$date)\n\n# Extract the year and month from the date\nowideu$year &lt;- format(owideu$date, \"%Y\")\nowideu$month &lt;- format(owideu$date, \"%m\")\n\n# Further subset the data to remove zero deaths and dates before 2024-01-20\ntt &lt;- subset(owideu, new_deaths != 0 & date &lt; \"2024-01-20\")\n\n# Subset the data for specific countries and years, focusing on Germany 2020 and December 2022\noutliers &lt;- tt %&gt;%\n  filter((location == \"Spain\" & year == \"2020\") |\n           (location == \"Germany\" & (year == \"2020\" | (year == \"2022\" & month == \"12\"))) |\n           (location == \"Ukraine\" & year == \"2021\") |\n           (location == \"Italy\" & year == \"2024\"))\n\n# For Spain 2020, select the highest and 3rd highest new deaths, and for others, select the highest\noutliers &lt;- outliers %&gt;%\n  group_by(location, year) %&gt;%\n  filter((location == \"Spain\" & year == \"2020\" & new_deaths %in% sort(new_deaths, decreasing = TRUE)[c(1, 3)]) |\n           (location != \"Spain\" & new_deaths == max(new_deaths, na.rm = TRUE))) %&gt;%\n  ungroup()\n\n# Create the base ggplot\nggplot() +\n  # Germany points (all data for Germany for context)\n  geom_point(data = subset(tt, location == \"Germany\"), aes(x = as.Date(date), y = new_deaths), color = \"violetred1\", size = 0.7) +\n  \n  # Spain points\n  geom_point(data = subset(tt, location == \"Spain\"), aes(x = as.Date(date), y = new_deaths), color = \"violetred1\", size = 0.7) +\n  \n  # Ukraine points\n  geom_point(data = subset(tt, location == \"Ukraine\"), aes(x = as.Date(date), y = new_deaths), color = \"violetred1\", size = 0.7) +\n  \n  # France points\n  geom_point(data = subset(tt, location == \"France\"), aes(x = as.Date(date), y = new_deaths), color = \"violetred1\", size = 0.7) +\n  \n  # All points scaled down by a factor of 6\n  geom_point(data = tt, aes(x = as.Date(date), y = new_deaths / 6), color = \"violetred1\", size = 1.4) +\n  \n  # Customize the axes and labels\n  labs(x = \"Dates\", y = \"COVID Deaths in Europe (Daily)\") +\n  \n  # Customize the date axis and set dynamic date breaks\n  scale_x_date(labels = date_format(\"%Y-%m\"), breaks = pretty_breaks(n = 30)) +\n  \n  # Custom y-axis with breaks up to 6000\n  scale_y_continuous(breaks = c(0, 1000, 2000, 3000, 4000, 5000, 6000), limits = c(0, 6500),\n                     labels = c(\"0\", \"1000\", \"\", \"3000\", \"\", \"5000\", \"\")) +\n  \n  # Apply a minimal theme with customizations for better aesthetics\n  theme_minimal(base_family = \"Palatino\") +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, family = \"Palatino\"),\n    axis.text.y = element_text(family = \"Palatino\"),\n    axis.title.x = element_text(family = \"Palatino\"),\n    axis.title.y = element_text(family = \"Palatino\"),\n    panel.grid = element_blank(),  # Remove background grid\n    panel.border = element_rect(fill = NA, color = \"black\"),  # Make axis lines are visible\n    axis.ticks.y = element_line(color = \"black\"),  # Show y-axis ticks\n    axis.ticks.length.y = unit(3, \"mm\"),  # Lengthen y-axis ticks\n    axis.ticks.x = element_blank()  # Remove x-axis ticks\n  ) +\n  \n  # Adding labels for the outliers\n  geom_text(data = outliers, aes(x = as.Date(date), y = new_deaths, label = location), \n            vjust = 0, hjust = -0.1, color = \"black\", size = 3, family = \"Palatino\")  # Position the label to the right of the point\n\n\n\n\n\n\n\n\n\n# Load the data from OWID GitHub\nowideu &lt;- read.csv(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n\n# Load necessary library\nlibrary(ggplot2)\n\n# Filter data for the United States\nus_data &lt;- subset(owideu, location == \"United States\")\n\n# Plot new COVID-19 cases over time\nggplot(us_data, aes(x = date, y = new_cases)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"New COVID-19 Cases in the United States\",\n       x = \"Date\",\n       y = \"New Cases\") +\n  theme_minimal()\n\nWarning: Removed 442 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\nus_data &lt;- subset(owideu, location == \"United States\" & !is.na(new_cases))\n\nggplot(us_data, aes(x = as.Date(date), y = new_cases, group = 1)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"New COVID-19 Cases in the United States\",\n       x = \"Date\",\n       y = \"New Cases\") +\n  theme_minimal()\n\n\n\n\n\n\n\nus_data &lt;- subset(owideu, location == \"United States\" & !is.na(new_cases))\n\nggplot(us_data, aes(x = as.Date(date), y = new_cases, group = location)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"New COVID-19 Cases in the United States\",\n       x = \"Date\",\n       y = \"New Cases\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# Load necessary library\nlibrary(ggplot2)\n\n# Filter and aggregate data for top 10 countries with the most cases\ncountry_data &lt;- aggregate(total_cases ~ location, data = owideu, max, na.rm = TRUE)\ntop_10_countries &lt;- head(country_data[order(-country_data$total_cases), ], 10)\n\n# Create the column chart\nggplot(top_10_countries, aes(x = reorder(location, -total_cases), y = total_cases)) +\n  geom_col(fill = \"steelblue\") +\n  labs(title = \"Top 10 Countries by Total COVID-19 Cases\",\n       x = \"Country\",\n       y = \"Total Cases\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 35, hjust = 1))\n\n\n\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)\n\n# Summarize total cases and population by continent\ncontinent_data &lt;- aggregate(cbind(total_cases, population) ~ continent, data = owideu, sum, na.rm = TRUE)\n\n# Remove any rows with missing continents\ncontinent_data &lt;- na.omit(continent_data)\n\n# Create the variable-width column chart\nvariable_width_chart &lt;- ggplot(continent_data, aes(x = continent, y = total_cases)) +\n  geom_col(aes(width = population / max(population)), fill = \"steelblue\") +\n  labs(title = \"Total COVID-19 Cases by Continent (Variable Width)\",\n       x = \"Continent (Width = Population)\",\n       y = \"Total Cases\") +\n  theme_minimal()\n\nWarning in geom_col(aes(width = population/max(population)), fill =\n\"steelblue\"): Ignoring unknown aesthetics: width\n\n# Display the chart\nvariable_width_chart\n\n\n\n\n\n\n\n\n\n# Summarize total deaths by continent\ncontinent_deaths &lt;- aggregate(total_deaths ~ continent, data = owideu, sum, na.rm = TRUE)\n\n# Remove any rows with missing continents\ncontinent_deaths &lt;- na.omit(continent_deaths)\n\n# Set up the basic column chart for deaths\nbarplot(height = continent_deaths$total_deaths,\n        names.arg = continent_deaths$continent,\n        col = \"darkred\",\n        main = \"Total COVID-19 Deaths by Continent\",\n        xlab = \"Continent\",\n        ylab = \"Total Deaths\",\n        las = 2, # Rotate x-axis labels\n        cex.names = 0.8) # Adjust label size\n\n\n\n\n\n\n\n\n\n# Summarize total cases and deaths by continent\ncontinent_data &lt;- aggregate(cbind(total_cases, total_deaths) ~ continent, data = owideu, sum, na.rm = TRUE)\n\n# Remove any rows with missing continents\ncontinent_data &lt;- na.omit(continent_data)\n\n# Set up the plotting area\npar(mar = c(5, 4, 4, 4) + 0.3) # Adjust margins to fit two y-axes\n\n# Create the bar chart for total deaths\nbarplot(height = continent_data$total_deaths,\n        names.arg = continent_data$continent,\n        col = \"darkred\",\n        ylim = c(0, max(continent_data$total_deaths) * 1.2),\n        main = \"Total COVID-19 Deaths and Cases by Continent\",\n        xlab = \"Continent\",\n        ylab = \"Total Deaths\",\n        las = 2,\n        cex.names = 0.8)\n\n# Add a second y-axis on the right for total cases\npar(new = TRUE)\nplot(continent_data$total_cases, type = \"o\", col = \"blue\", axes = FALSE, xlab = \"\", ylab = \"\",\n     ylim = c(0, max(continent_data$total_cases) * 1.2))\naxis(4)\nmtext(\"Total Cases\", side = 4, line = 3)\n\n# Add a legend\nlegend(\"topright\", legend = c(\"Total Deaths\", \"Total Cases\"),\n       fill = c(\"darkred\", NA), col = c(NA, \"blue\"), lty = c(NA, 1), pch = c(15, 1))\n\n\n\n\n\n\n\n\n\ninstall.packages(\"gridExtra\")\n\n\nThe downloaded binary packages are in\n    /var/folders/7g/8wy2j8g155740h4zdvlmkws00000gn/T//RtmpVypRl6/downloaded_packages\n\nlibrary(gridExtra)\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\nlibrary(ggplot2)\n# Summarize total cases and total deaths by continent\ncontinent_data &lt;- aggregate(cbind(total_cases, total_deaths) ~ continent, data = owideu, sum, na.rm = TRUE)\n\n# Remove any rows with missing continents\ncontinent_data &lt;- na.omit(continent_data)\n\n# Create bar charts for cases and deaths\ncases_chart &lt;- ggplot(continent_data, aes(x = continent, y = total_cases)) +\n  geom_col(fill = \"steelblue\") +\n  labs(title = \"Total COVID-19 Cases by Continent\",\n       x = \"Continent\", y = \"Total Cases\") +\n  theme_minimal()\n\ndeaths_chart &lt;- ggplot(continent_data, aes(x = continent, y = total_deaths)) +\n  geom_col(fill = \"darkred\") +\n  labs(title = \"Total COVID-19 Deaths by Continent\",\n       x = \"Continent\", y = \"Total Deaths\") +\n  theme_minimal()\n\n# Create a summary table\nsummary_table &lt;- tableGrob(continent_data)\n\n# Arrange charts and table in a grid\ngrid.arrange(cases_chart, deaths_chart, summary_table, nrow = 2)\n\n\n\n\n\n\n\n\n\n\nlibrary(quanteda)\n\nPackage version: 4.1.0\nUnicode version: 14.0\nICU version: 71.1\n\n\nParallel computing: disabled\n\n\nSee https://quanteda.io for tutorials and examples.\n\nlibrary(quanteda.textmodels)\nlibrary(quanteda.textplots)\nlibrary(readr)\nlibrary(ggplot2)\n\nsummit &lt;- read_csv(\"https://raw.githubusercontent.com/datageneration/datamethods/master/textanalytics/summit_11162021.csv\")\n\nRows: 14520 Columns: 90\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (50): screen_name, text, source, reply_to_screen_name, hashtags, symbol...\ndbl  (26): user_id, status_id, display_text_width, reply_to_status_id, reply...\nlgl  (10): is_quote, is_retweet, quote_count, reply_count, ext_media_type, q...\ndttm  (4): created_at, quoted_created_at, retweet_created_at, account_create...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nsum_twt = summit$text\ntoks = tokens(sum_twt)\nsumtwtdfm &lt;- dfm(toks)\nclass(toks)\n\n[1] \"tokens\"\n\nsum_lsa &lt;- textmodel_lsa(sumtwtdfm, nd=4,  margin = c(\"both\", \"documents\", \"features\"))\nsummary(sum_lsa)\n\n                Length    Class     Mode   \nsk                      4 -none-    numeric\ndocs                58080 -none-    numeric\nfeatures            63972 -none-    numeric\nmatrix_low_rank 232218360 -none-    numeric\ndata            232218360 dgCMatrix S4     \n\nhead(sum_lsa$docs)\n\n              [,1]          [,2]          [,3]          [,4]\ntext1 8.670375e-03  9.539431e-03 -3.365261e-03  1.378640e-02\ntext2 8.662406e-06 -8.754517e-06 -6.159723e-06  1.673892e-05\ntext3 2.917454e-03  6.809891e-03  1.059921e-03 -3.180288e-03\ntext4 1.046103e-02  8.782783e-04 -4.359418e-03  4.941183e-03\ntext5 3.247147e-03  8.006068e-03  1.632191e-04 -4.657788e-03\ntext6 3.247147e-03  8.006068e-03  1.632191e-04 -4.657788e-03\n\nclass(sum_lsa)\n\n[1] \"textmodel_lsa\"\n\ntweet_dfm &lt;- tokens(sum_twt, remove_punct = TRUE) %&gt;%\n  dfm()\nhead(tweet_dfm)\n\nDocument-feature matrix of: 6 documents, 15,927 features (99.89% sparse) and 0 docvars.\n       features\ndocs    breaking news us president biden amp communist china leader xi\n  text1        1    1  1         1     1   1         1     2      1  1\n  text2        0    0  0         0     0   0         0     0      0  0\n  text3        0    0  0         0     1   0         0     0      0  1\n  text4        0    0  0         1     1   0         0     0      0  1\n  text5        0    0  0         0     1   0         0     0      0  1\n  text6        0    0  0         0     1   0         0     0      0  1\n[ reached max_nfeat ... 15,917 more features ]\n\ntag_dfm &lt;- dfm_select(tweet_dfm, pattern = \"#*\")\ntoptag &lt;- names(topfeatures(tag_dfm, 50))\nhead(toptag, 10)\n\n [1] \"#china\"       \"#biden\"       \"#xijinping\"   \"#joebiden\"    \"#america\"    \n [6] \"#americans\"   \"#coronavirus\" \"#fentanyl\"    \"#xi\"          \"#us\"         \n\nlibrary(\"quanteda.textplots\")\ntag_fcm &lt;- fcm(tag_dfm)\nhead(tag_fcm)\n\nFeature co-occurrence matrix of: 6 by 665 features.\n               features\nfeatures        #breaking #breakingnews #biden #china #usa #pray4america\n  #breaking             0             4      5      5    5             0\n  #breakingnews         0             0      4      5    4             0\n  #biden                0             0      0    443   49             0\n  #china                0             0      0      8   76             0\n  #usa                  0             0      0      0    6             0\n  #pray4america         0             0      0      0    0             0\n               features\nfeatures        #joebiden #xijinping #america #americans\n  #breaking             0          0        0          0\n  #breakingnews         0          0        0          0\n  #biden              299        370      302        295\n  #china              339        434      308        295\n  #usa                 12         15        0          0\n  #pray4america         0          0        0          0\n[ reached max_nfeat ... 655 more features ]\n\ntopgat_fcm &lt;- fcm_select(tag_fcm, pattern = toptag)\ntextplot_network(topgat_fcm, min_freq = 50, edge_alpha = 0.8, edge_size = 1)\n\n\n\n\n\n\n\n\n\nlibrary(quanteda)\nlibrary(quanteda.textmodels)\nlibrary(quanteda.textplots)\nlibrary(readr)\nlibrary(ggplot2)\n\ndfm_inaug &lt;- corpus_subset(data_corpus_inaugural, Year &lt;= 1826) %&gt;%\n  tokens() %&gt;% \n  tokens_remove(stopwords('english')) %&gt;% \n  tokens_remove(\"[[:punct:]]\", valuetype = \"regex\") %&gt;%\n  dfm() %&gt;%\n  dfm_trim(min_termfreq = 10, verbose = FALSE)\nset.seed(100)\ntextplot_wordcloud(dfm_inaug)\n\n\n\n\n\n\n\n\n\ninaug_speech = data_corpus_inaugural\n\ndata_corpus_inaugural_subset &lt;- \n  corpus_subset(data_corpus_inaugural, Year &gt; 1949)\nkwic(tokens(data_corpus_inaugural_subset), pattern = \"american\") %&gt;%\n  textplot_xray()"
  },
  {
    "objectID": "UntitledQMD.html#objective-create-graphics-with-r",
    "href": "UntitledQMD.html#objective-create-graphics-with-r",
    "title": "Credit: https://fronkonstin.com",
    "section": "Objective: Create graphics with R",
    "text": "Objective: Create graphics with R"
  },
  {
    "objectID": "UntitledQMD.html#title-fall-color",
    "href": "UntitledQMD.html#title-fall-color",
    "title": "Credit: https://fronkonstin.com",
    "section": "Title: Fall color",
    "text": "Title: Fall color"
  },
  {
    "objectID": "Project EPPS 6356.html",
    "href": "Project EPPS 6356.html",
    "title": "Allen Hernandez",
    "section": "",
    "text": "Projects/Assignments\nEPPS 6356\nA Maroon Leaf\n\noptions(repos = c(CRAN = \"https://cran.rstudio.com/\"))\nlibrary(gsubfn)\n\nLoading required package: proto\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %&gt;% unlist\n\nstatus=data.frame(x=numeric(1), y=numeric(1), alfa=numeric(1))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %&gt;% rbind(points)-&gt;points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %&gt;%\n      rbind(status) -&gt; status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n\n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]-&gt;points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %&gt;%\n      rbind(points) -&gt; points\n    status[-1,]-&gt;status\n  }\n}\n\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color=\"maroon\", \n               data=na.omit(points)) +\n  coord_fixed(ratio = 1) +\n  theme_void()"
  }
]